#!/usr/bin/env node
/* eslint-disable no-console */
'use strict';

let esprima = require('esprima'),
    fs = require('fs'),
    //printer = require('../printer/html'),
    printer = require('../printer/log'),
    results = new Map(),
    indent = 0,
    visitor;

visitor = {
    collect: (node, results) => {
        let type = node.type;

        if (type === 'ExpressionStatement') {
            let expression = node.expression,
                callee = expression.callee,
                args = expression.arguments;

            if (expression.type === 'CallExpression' && callee.name === 'describe') {
                let node = args[0],
                    value;

                //
                // Node types we're interested in:
                //     --> BinaryExpression
                //     --> ConditionalExpression
                //     --> Literal
                //

                value = visitor['get' + node.type](node);
                results.set(value, new Map());

                return visitor.visit(args[1].body, visitor.collect, results.get(value));
            }
        }

        return results;
    },

    getBinaryExpression: (node) => {
        let nodeLeft = node.left,
            nodeRight = node.right,
            value;

        value = [
            nodeLeft.type === 'Identifier' ?
                nodeLeft.name : nodeLeft.raw,

            node.operator,

            nodeRight.type === 'Identifier' ?
                nodeRight.name : nodeRight.raw
        ].join(' ');

        while (nodeLeft && nodeLeft.left) {
            return visitor.getBinaryExpression(nodeLeft) + value;
        }

        return value;
    },

    getConditionalExpression: (node) => {
        // TODO: Support nested ternaries.
        return [node.test.name, ' ? ', node.consequent.value, ' : ', node.alternate.value].join(' ');
    },

    getLiteral: (node) => {
        return node.value;
    },

    visit: (object, fn, results) => {
        results = fn.call(null, object, results);

        for (let n in object) {
            if (object.hasOwnProperty(n)) {
                let obj = object[n];

                if (typeof obj === 'object' && obj !== null) {
                    visitor.visit(obj, fn, results);
                }
            }
        }

        return results;
    }
};

fs.readFile(process.argv[2], 'utf8', (err, fileContents) => {
    if (err) {
        throw err;
    }

    results = visitor.visit(esprima.parse(fileContents), visitor.collect, results);
    printer.init(results);
});

