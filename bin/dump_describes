#!/usr/bin/env node
'use strict';

const logger = require('onf-logger');
const argv = require('yargs')
    .usage('Usage: dump_describes [options]')

    .describe('active', 'List only active blocks (i.e., `fdescribe`, `fit`)')
    .boolean('active')

    .describe('inactive', 'List only inactive blocks (i.e., `xdescribe`, `xit`)')
    .boolean('inactive')

    .describe('destination', '[Optional] The location to save the output (defaults to $PWD)')
    .alias('destination', 'd')
    .nargs('target', 1)

    .describe('html', 'Creates an html document of the tree')
    .boolean('html')

    .describe('markdown', 'Creates a markdown document of the tree')
    .alias('markdown', 'md')
    .boolean('markdown')

    .describe('target', 'The target suite to parse')
    .alias('target', 't')
    .nargs('target', 1)

    .describe('debug', 'Turns on debug mode')
    .boolean('debug')

    .describe('verbose', 'Dumps `it` blocks')
    .alias('verbose', 'v')
    .boolean('verbose')

    .help('help')
    .alias('help', 'h')
    .argv;

const onfStatic = require('onf-static');
const visitor = require('../src/visitor');

const target = argv.target;
const logInfo = logger.info;
const logError = logger.error;

let type;

if (argv.html) {
    type = 'html';
} else if (argv.markdown) {
    type = 'markdown';
} else {
    type = 'log';
}

onfStatic.setOptions({
    destination: argv.destination || '.',
    generator: {
        html: require('../src/generator/html'),
        log: require('../src/generator/log'),
        markdown: require('../src/generator/markdown')
    },
    type,
    useMap: true, // Use Map data structure rather than an Array.
    verbose: argv.verbose,
    visitor: visitor.refs
});

visitor.setOptions({
    active: argv.active,
    inactive: argv.inactive,
    verbose: argv.verbose,
});

onfStatic.setDebugLevel(!argv.debug ? 'NONE' : 'DEBUG');

if (!target) {
    const stdin = process.stdin;
    let buf = '';

    stdin.setEncoding('utf8');

    stdin.on('readable', () => {
        const chunk = stdin.read();

        if (chunk !== null) {
            buf += chunk;
        }
    });

    stdin.on('end', () => {
        // Last argument denotes this as data.
        onfStatic.makeTree(buf, true)
        .then(logInfo)
        .catch(logError);
    });
} else {
    onfStatic.makeTree(target)
    .then(logInfo);
}

