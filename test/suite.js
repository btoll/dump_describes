// Generated by CoffeeScript 1.10.0
(function() {
  define(['backbone', 'underscore', 'social-button-editor-path/views/list-visit-networks-view', 'social-button-editor-path/collections/social-visit-network-collection'], function(Backbone, _, ListVisitNetworksView, SocialNetworkCollection) {
    return describe('ListVisitNetworksView', function() {
      beforeEach(function() {
        var dropdownSpy, sortableSpy, tooltipSpy;
        this.eventBus = _.extend({}, Backbone.Events);
        this.mockModal = {
          close: jasmine.createSpy('mockModal')
        };
        this.mockCollection = new SocialNetworkCollection([
          {
            id: 'facebook',
            name: 'Facebook',
            status: 'on',
            placeholder_url: 'http://www.facebook.com/something'
          }, {
            id: 'twitter',
            name: 'Twitter',
            status: 'on',
            placeholder_url: 'http://www.twitter.com/something'
          }, {
            id: 'pinterest',
            name: 'Pinterest',
            status: 'off',
            placeholder_url: 'http://www.pinterest.com/something'
          }, {
            id: 'cactus',
            name: 'Cactus',
            status: 'off',
            placeholder_url: 'http://www.cactus.com/something'
          }
        ]);
        this.view = new ListVisitNetworksView({
          collection: this.mockCollection,
          eventBus: this.eventBus,
          parentModal: this.mockModal
        });
        spyOn(this.view, 'render').and.callThrough();
        dropdownSpy = jasmine.createSpy('fedDropdown');
        tooltipSpy = jasmine.createSpy('fedTooltip');
        sortableSpy = jasmine.createSpy('sortable');
        window.$.fn.fedDropdown = dropdownSpy;
        window.$.fn.fedTooltip = tooltipSpy;
        return window.$.fn.sortable = sortableSpy;
      });
      describe('#initialize', function() {
        return it('should render the supporting modal markup', function() {
          expect(this.view.$el.find('.Modal-heading').length).toBe(1);
          expect(this.view.$el.find('.Modal-close').length).toBe(1);
          expect(this.view.$el.find('#social-visit-url-list').length).toBe(1);
          expect(this.view.$el.find('#insert').length).toBe(1);
          return expect(this.view.$el.find('#cancel').length).toBe(1);
        });
      });
      xdescribe('#render', function() {
        it('should setup sortable network fields', function() {
          expect(window.$.fn.sortable).not.toHaveBeenCalled();
          this.view.render();
          return expect(window.$.fn.sortable).toHaveBeenCalled();
        });
        it('should setup a fed drop down', function() {
          expect(window.$.fn.fedDropdown).not.toHaveBeenCalled();
          this.view.render();
          return expect(window.$.fn.fedDropdown).toHaveBeenCalled();
        });
        return it('should setup fed tooltips', function() {
          expect(window.$.fn.fedTooltip).not.toHaveBeenCalled();
          this.view.render();
          return expect(window.$.fn.fedTooltip).toHaveBeenCalled();
        });
      });
      fdescribe('adding / removing networks', function() {
        beforeEach(function() {
          return this.view.render();
        });
        it('clicking the trash can should remove the network from the list', function() {
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(2);
          this.view.$el.find('.delete-link[data-network-id="facebook"]').click();
          return expect(this.view.$el.find('#social-visit-url-list li').length).toBe(1);
        });
        it('clicking the trash can should remove the network from the list even if the url was invalid', function() {
          var deletedModel;
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(2);
          this.view.$el.find('input[data-network-id="facebook"]').val('asd').trigger('keyup');
          expect(this.mockCollection.get('facebook').get('isValid')).toBe(false);
          this.view.$el.find('.delete-link[data-network-id="facebook"]').click();
          expect(this.mockCollection.get('facebook').get('isValid')).toBe(true);
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(1);
          deletedModel = this.mockCollection.get('facebook');
          return expect(deletedModel.get('status')).toBe('off');
        });
        xit('clicking all of the trash cans should close the modal and trigger an editor deletion', function(done) {
          this.eventBus.on('modal-insert', function() {
            return done();
          });
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(2);
          this.view.$el.find('.delete-link[data-network-id="facebook"]').click();
          this.view.$el.find('.delete-link[data-network-id="twitter"]').click();
          expect(this.mockModal.close).toHaveBeenCalled();
          return expect(this.mockCollection.where({
            status: 'on'
          }).length).toBe(0);
        });
        it('clicking on a network in the dropdown should add it to the list', function() {
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(2);
          this.view.$el.find('.js-dropdownTrigger').click();
          this.view.$el.find('.js-dropdown li[data-network-id="cactus"]').click();
          return expect(this.view.$el.find('#social-visit-url-list li').length).toBe(3);
        });
        return it('clicking on all the networks in the dropdown should disable the dropdown', function() {
          expect(this.view.$el.find('#social-visit-url-list li').length).toBe(2);
          this.view.$el.find('.js-dropdownTrigger').click();
          this.view.$el.find('.js-dropdown li[data-network-id="cactus"]').click();
          this.view.$el.find('.js-dropdown li[data-network-id="pinterest"]').click();
          return expect(this.view.$el.find('#social-visit-url-list li').length).toBe(4);
        });
      });
      describe('url fields', function() {
        beforeEach(function() {
          return this.view.render();
        });
        it('should be invalid if they do not start with http://', function() {
          expect(this.mockCollection.get('facebook').get('isValid')).toBe(true);
          this.view.$el.find('input[data-network-id="facebook"]').val('asd').trigger('keyup');
          return expect(this.mockCollection.get('facebook').get('isValid')).toBe(false);
        });
        it('should prepend http:// if the user typed more then 4 characters that are not http', function() {
          var currentVal, finalVal, i, inputVal, key, keysToType, len, text;
          inputVal = this.view.$el.find('input[data-network-id="twitter"]').val();
          expect(inputVal.indexOf('http://')).toBe(-1);
          text = 'twit';
          keysToType = text.split('');
          for (i = 0, len = keysToType.length; i < len; i++) {
            key = keysToType[i];
            currentVal = this.view.$el.find('input[data-network-id="twitter"]').val();
            this.view.$el.find('input[data-network-id="twitter"]').val(currentVal + key).trigger('keyup');
          }
          finalVal = this.view.$el.find('input[data-network-id="twitter"]').val();
          return expect(finalVal).toEqual('http://twit');
        });
        return it('should prepend http:// the user pasted in a link that didnt already have a protocol', function() {
          var finalVal, inputVal, text;
          inputVal = this.view.$el.find('input[data-network-id="twitter"]').val();
          expect(inputVal.indexOf('http://')).toBe(-1);
          text = 'twitter.com/jed_sed';
          this.view.$el.find('input[data-network-id="twitter"]').val(text).trigger('paste');
          finalVal = this.view.$el.find('input[data-network-id="twitter"]').val();
          return expect(finalVal).toEqual('http://twitter.com/jed_sed');
        });
      });
      return describe('buttons', function() {
        beforeEach(function() {
          return this.view.render();
        });
        it('clicking the cancel button should close the modal', function() {
          expect(this.mockModal.close).not.toHaveBeenCalled();
          this.view.$el.find('#cancel').click();
          return expect(this.mockModal.close).toHaveBeenCalled();
        });
        return fit('clicking insert should close the modal and trigger a modal-insert event', function(done) {
          expect(this.mockModal.close).not.toHaveBeenCalled();
          this.eventBus.on('modal-insert', function() {
            return done();
          });
          this.view.$el.find('#insert').click();
          return expect(this.mockModal.close).toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);
